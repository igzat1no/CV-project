# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os, sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import cv2
import dlib
import imutils
from utils import face_thin_auto, SharpenImage
predictor_path = "./data/shape_predictor_68_face_landmarks.dat"
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(predictor_path)

class Ui_UI(object):
    def __init__(self):
        if os.path.exists("./data/shape_predictor_68_face_landmarks.dat"):
            self.path_predictor = os.path.abspath(
                "./data/shape_predictor_68_face_landmarks.dat")
        else:
            QMessageBox.warning(self.centralWidget, '警告', '默认的dlib模型文件路径不存在，请指定文件位置。\
                                \n或从http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2下载')
            self.path_predictor, _ = QFileDialog.getOpenFileName(
                self.centralWidget, '选择dlib模型文件', './', 'Data Files(*.dat)')
        self.mu = Makeup(self.path_predictor)
        self.path_img = ''
        
    def setupUi(self, UI):
        UI.setObjectName("UI")
        UI.resize(941, 641)
        self.widget_2 = QtWidgets.QWidget(UI)
        self.widget_2.setGeometry(QtCore.QRect(20, 20, 371, 601))
        self.widget_2.setObjectName("widget_2")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.widget_2)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 81, 291))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.face_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.face_button.setFont(font)
        self.face_button.setObjectName("face_button")
        self.verticalLayout.addWidget(self.face_button)
        self.modify_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.modify_button.setFont(font)
        self.modify_button.setObjectName("modify_button")
        self.verticalLayout.addWidget(self.modify_button)
        self.imitate_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.imitate_button.setFont(font)
        self.imitate_button.setObjectName("imitate_button")
        self.verticalLayout.addWidget(self.imitate_button)
        self.emotion_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.emotion_button.setFont(font)
        self.emotion_button.setObjectName("emotion_button")
        self.verticalLayout.addWidget(self.emotion_button)
        self.hair_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.hair_button.setFont(font)
        self.hair_button.setObjectName("hair_button")
        self.verticalLayout.addWidget(self.hair_button)
        self.background_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background_button.sizePolicy().hasHeightForWidth())
        self.background_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.background_button.setFont(font)
        self.background_button.setObjectName("background_button")
        self.verticalLayout.addWidget(self.background_button)
        self.style_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.style_button.sizePolicy().hasHeightForWidth())
        self.style_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.style_button.setFont(font)
        self.style_button.setObjectName("style_button")
        self.verticalLayout.addWidget(self.style_button)
        self.inputfile = QtWidgets.QPushButton(self.widget_2)
        self.inputfile.setGeometry(QtCore.QRect(0, 520, 111, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.inputfile.setFont(font)
        self.inputfile.setObjectName("inputfile")
        self.modify_area_widget = QtWidgets.QWidget(self.widget_2)
        self.modify_area_widget.setGeometry(QtCore.QRect(140, 0, 181, 501))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modify_area_widget.sizePolicy().hasHeightForWidth())
        self.modify_area_widget.setSizePolicy(sizePolicy)
        self.modify_area_widget.setObjectName("modify_area_widget")
        self.modify_area = QtWidgets.QVBoxLayout(self.modify_area_widget)
        self.modify_area.setContentsMargins(0, 0, 0, 0)
        self.modify_area.setObjectName("modify_area")
        self.label_22 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_22.sizePolicy().hasHeightForWidth())
        self.label_22.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_22.setFont(font)
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.modify_area.addWidget(self.label_22)
        self.horizontalSlider_21 = QtWidgets.QSlider(self.modify_area_widget)
        self.horizontalSlider_21.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_21.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_21.setSizePolicy(sizePolicy)
        self.horizontalSlider_21.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_21.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_21.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_21.setSliderPosition(50)
        self.horizontalSlider_21.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_21.setObjectName("horizontalSlider_21")
        self.modify_area.addWidget(self.horizontalSlider_21)
        self.label_23 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_23.sizePolicy().hasHeightForWidth())
        self.label_23.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_23.setFont(font)
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.modify_area.addWidget(self.label_23)
        self.horizontalSlider_22 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_22.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_22.setSizePolicy(sizePolicy)
        self.horizontalSlider_22.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_22.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_22.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_22.setSliderPosition(50)
        self.horizontalSlider_22.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_22.setObjectName("horizontalSlider_22")
        self.modify_area.addWidget(self.horizontalSlider_22)
        self.label_24 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_24.sizePolicy().hasHeightForWidth())
        self.label_24.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_24.setFont(font)
        self.label_24.setAlignment(QtCore.Qt.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.modify_area.addWidget(self.label_24)
        self.horizontalSlider_23 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_23.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_23.setSizePolicy(sizePolicy)
        self.horizontalSlider_23.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_23.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_23.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_23.setSliderPosition(50)
        self.horizontalSlider_23.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_23.setObjectName("horizontalSlider_23")
        self.modify_area.addWidget(self.horizontalSlider_23)
        self.label_25 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_25.sizePolicy().hasHeightForWidth())
        self.label_25.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_25.setFont(font)
        self.label_25.setAlignment(QtCore.Qt.AlignCenter)
        self.label_25.setObjectName("label_25")
        self.modify_area.addWidget(self.label_25)
        self.horizontalSlider_24 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_24.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_24.setSizePolicy(sizePolicy)
        self.horizontalSlider_24.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_24.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_24.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_24.setSliderPosition(50)
        self.horizontalSlider_24.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_24.setObjectName("horizontalSlider_24")
        self.modify_area.addWidget(self.horizontalSlider_24)
        self.label_26 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_26.sizePolicy().hasHeightForWidth())
        self.label_26.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_26.setFont(font)
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.modify_area.addWidget(self.label_26)
        self.horizontalSlider_25 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_25.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_25.setSizePolicy(sizePolicy)
        self.horizontalSlider_25.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_25.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_25.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_25.setSliderPosition(50)
        self.horizontalSlider_25.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_25.setObjectName("horizontalSlider_25")
        self.modify_area.addWidget(self.horizontalSlider_25)
        self.label_27 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_27.setFont(font)
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.modify_area.addWidget(self.label_27)
        self.horizontalSlider_26 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_26.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_26.setSizePolicy(sizePolicy)
        self.horizontalSlider_26.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_26.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_26.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_26.setSliderPosition(50)
        self.horizontalSlider_26.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_26.setObjectName("horizontalSlider_26")
        self.modify_area.addWidget(self.horizontalSlider_26)
        self.label_28 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_28.sizePolicy().hasHeightForWidth())
        self.label_28.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_28.setFont(font)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.modify_area.addWidget(self.label_28)
        self.horizontalSlider_27 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_27.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_27.setSizePolicy(sizePolicy)
        self.horizontalSlider_27.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_27.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_27.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_27.setSliderPosition(50)
        self.horizontalSlider_27.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_27.setObjectName("horizontalSlider_27")
        self.modify_area.addWidget(self.horizontalSlider_27)
        self.label_29 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_29.sizePolicy().hasHeightForWidth())
        self.label_29.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_29.setFont(font)
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.modify_area.addWidget(self.label_29)
        self.horizontalSlider_28 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_28.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_28.setSizePolicy(sizePolicy)
        self.horizontalSlider_28.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_28.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_28.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_28.setSliderPosition(50)
        self.horizontalSlider_28.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_28.setObjectName("horizontalSlider_28")
        self.modify_area.addWidget(self.horizontalSlider_28)
        self.label_30 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_30.sizePolicy().hasHeightForWidth())
        self.label_30.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_30.setFont(font)
        self.label_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_30.setObjectName("label_30")
        self.modify_area.addWidget(self.label_30)
        self.horizontalSlider_29 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_29.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_29.setSizePolicy(sizePolicy)
        self.horizontalSlider_29.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_29.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_29.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_29.setSliderPosition(50)
        self.horizontalSlider_29.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_29.setObjectName("horizontalSlider_29")
        self.modify_area.addWidget(self.horizontalSlider_29)
        self.label_31 = QtWidgets.QLabel(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_31.sizePolicy().hasHeightForWidth())
        self.label_31.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_31.setFont(font)
        self.label_31.setAlignment(QtCore.Qt.AlignCenter)
        self.label_31.setObjectName("label_31")
        self.modify_area.addWidget(self.label_31)
        self.horizontalSlider_30 = QtWidgets.QSlider(self.modify_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_30.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_30.setSizePolicy(sizePolicy)
        self.horizontalSlider_30.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_30.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_30.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_30.setSliderPosition(50)
        self.horizontalSlider_30.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_30.setObjectName("horizontalSlider_30")
        self.modify_area.addWidget(self.horizontalSlider_30)
        self.face_area_widget = QtWidgets.QWidget(self.widget_2)
        self.face_area_widget.setGeometry(QtCore.QRect(140, 0, 181, 601))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.face_area_widget.sizePolicy().hasHeightForWidth())
        self.face_area_widget.setSizePolicy(sizePolicy)
        self.face_area_widget.setObjectName("face_area_widget")
        self.face_area = QtWidgets.QVBoxLayout(self.face_area_widget)
        self.face_area.setContentsMargins(0, 0, 0, 0)
        self.face_area.setObjectName("face_area")
        self.label = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.face_area.addWidget(self.label)
        self.horizontalSlider = QtWidgets.QSlider(self.face_area_widget)
        self.horizontalSlider.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider.setSliderPosition(0)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.face_area.addWidget(self.horizontalSlider)
        self.label_2 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.face_area.addWidget(self.label_2)
        self.horizontalSlider_2 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_2.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_2.setSizePolicy(sizePolicy)
        self.horizontalSlider_2.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_2.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_2.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_2.setSliderPosition(50)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.face_area.addWidget(self.horizontalSlider_2)
        self.label_3 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.face_area.addWidget(self.label_3)
        self.horizontalSlider_3 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_3.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_3.setSizePolicy(sizePolicy)
        self.horizontalSlider_3.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_3.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_3.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_3.setSliderPosition(50)
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.face_area.addWidget(self.horizontalSlider_3)
        self.label_4 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.face_area.addWidget(self.label_4)
        self.horizontalSlider_4 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_4.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_4.setSizePolicy(sizePolicy)
        self.horizontalSlider_4.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_4.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_4.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_4.setSliderPosition(50)
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.face_area.addWidget(self.horizontalSlider_4)
        self.label_5 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.face_area.addWidget(self.label_5)
        self.horizontalSlider_5 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_5.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_5.setSizePolicy(sizePolicy)
        self.horizontalSlider_5.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_5.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_5.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_5.setSliderPosition(50)
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.face_area.addWidget(self.horizontalSlider_5)
        self.label_6 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.face_area.addWidget(self.label_6)
        self.horizontalSlider_6 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_6.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_6.setSizePolicy(sizePolicy)
        self.horizontalSlider_6.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_6.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_6.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_6.setSliderPosition(50)
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.face_area.addWidget(self.horizontalSlider_6)
        self.label_7 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.face_area.addWidget(self.label_7)
        self.horizontalSlider_7 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_7.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_7.setSizePolicy(sizePolicy)
        self.horizontalSlider_7.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_7.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_7.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_7.setSliderPosition(50)
        self.horizontalSlider_7.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_7.setObjectName("horizontalSlider_7")
        self.face_area.addWidget(self.horizontalSlider_7)
        self.label_8 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.face_area.addWidget(self.label_8)
        self.horizontalSlider_8 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_8.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_8.setSizePolicy(sizePolicy)
        self.horizontalSlider_8.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_8.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_8.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_8.setSliderPosition(50)
        self.horizontalSlider_8.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_8.setObjectName("horizontalSlider_8")
        self.face_area.addWidget(self.horizontalSlider_8)
        self.label_9 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.face_area.addWidget(self.label_9)
        self.horizontalSlider_10 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_10.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_10.setSizePolicy(sizePolicy)
        self.horizontalSlider_10.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_10.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_10.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_10.setSliderPosition(50)
        self.horizontalSlider_10.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_10.setObjectName("horizontalSlider_10")
        self.face_area.addWidget(self.horizontalSlider_10)
        self.label_10 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.face_area.addWidget(self.label_10)
        self.horizontalSlider_9 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_9.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_9.setSizePolicy(sizePolicy)
        self.horizontalSlider_9.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_9.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_9.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_9.setSliderPosition(50)
        self.horizontalSlider_9.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_9.setObjectName("horizontalSlider_9")
        self.face_area.addWidget(self.horizontalSlider_9)
        self.label_14 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_14.setFont(font)
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.face_area.addWidget(self.label_14)
        self.horizontalSlider_13 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_13.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_13.setSizePolicy(sizePolicy)
        self.horizontalSlider_13.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_13.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_13.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_13.setSliderPosition(50)
        self.horizontalSlider_13.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_13.setObjectName("horizontalSlider_13")
        self.face_area.addWidget(self.horizontalSlider_13)
        self.label_15 = QtWidgets.QLabel(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        self.label_15.setFont(font)
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.face_area.addWidget(self.label_15)
        self.horizontalSlider_14 = QtWidgets.QSlider(self.face_area_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_14.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_14.setSizePolicy(sizePolicy)
        self.horizontalSlider_14.setMinimumSize(QtCore.QSize(160, 0))
        self.horizontalSlider_14.setBaseSize(QtCore.QSize(40, 0))
        self.horizontalSlider_14.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.horizontalSlider_14.setSliderPosition(50)
        self.horizontalSlider_14.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_14.setObjectName("horizontalSlider_14")
        self.face_area.addWidget(self.horizontalSlider_14)
        self.style_area_widget = QtWidgets.QWidget(self.widget_2)
        self.style_area_widget.setGeometry(QtCore.QRect(140, 0, 111, 471))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.style_area_widget.sizePolicy().hasHeightForWidth())
        self.style_area_widget.setSizePolicy(sizePolicy)
        self.style_area_widget.setObjectName("style_area_widget")
        self.style_area = QtWidgets.QVBoxLayout(self.style_area_widget)
        self.style_area.setContentsMargins(0, 0, 0, 0)
        self.style_area.setObjectName("style_area")
        self.pushButton_9 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_9.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.style_area.addWidget(self.pushButton_9)
        self.pushButton_8 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_8.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.style_area.addWidget(self.pushButton_8)
        self.pushButton_11 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_11.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setObjectName("pushButton_11")
        self.style_area.addWidget(self.pushButton_11)
        self.pushButton_12 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_12.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setObjectName("pushButton_12")
        self.style_area.addWidget(self.pushButton_12)
        self.pushButton_13 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_13.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setObjectName("pushButton_13")
        self.style_area.addWidget(self.pushButton_13)
        self.pushButton_15 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_15.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setObjectName("pushButton_15")
        self.style_area.addWidget(self.pushButton_15)
        self.pushButton_14 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_14.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setObjectName("pushButton_14")
        self.style_area.addWidget(self.pushButton_14)
        self.pushButton_16 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_16.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setObjectName("pushButton_16")
        self.style_area.addWidget(self.pushButton_16)
        self.pushButton_10 = QtWidgets.QPushButton(self.style_area_widget)
        self.pushButton_10.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setObjectName("pushButton_10")
        self.style_area.addWidget(self.pushButton_10)
        self.widget = QtWidgets.QWidget(UI)
        self.widget.setGeometry(QtCore.QRect(380, 20, 541, 601))
        self.widget.setObjectName("widget")
        self.label_11 = QtWidgets.QLabel(self.widget)
        self.label_11.setGeometry(QtCore.QRect(0, 0, 541, 601))
        self.label_11.setText("")
        self.label_11.setPixmap(QtGui.QPixmap("resource/empty_head.jpg"))
        self.label_11.setScaledContents(False)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")

        self.retranslateUi(UI)
        QtCore.QMetaObject.connectSlotsByName(UI)
        
        self.face_area_widget.setVisible(False)
        self.modify_area_widget.setVisible(False)
        self.style_area_widget.setVisible(False)
        
        self.inputfile.clicked.connect(self.openfile)
        self.face_button.clicked.connect(self.show_face_area)
        self.modify_button.clicked.connect(self.show_modify_area)
        self.style_button.clicked.connect(self.show_style_area)
        self.collect_sl()
        self.collect_button()
        self.side_button = [self.face_button, self.modify_button, self.imitate_button,
                        self.emotion_button, self.hair_button, self.background_button,
                        self.style_button]
        self._set_statu(self.side_button, False)

    def collect_sl(self):
        self.horizontalSlider.valueChanged[int].connect(self.__getattribute__('_change'))
        self.horizontalSlider_2.valueChanged[int].connect(self.__getattribute__('_change'))
        self.horizontalSlider_5.valueChanged[int].connect(self.__getattribute__('_change'))
        self.horizontalSlider_10.valueChanged[int].connect(self.__getattribute__('_change'))

    def collect_button(self):
        self.pushButton_9.clicked.connect(self.__getattribute__('_original_style'))
        self.pushButton_8.clicked.connect(self.__getattribute__('_qing1_se4'))
        self.pushButton_12.clicked.connect(self.__getattribute__('_lan2_diao4'))
        self.pushButton_16.clicked.connect(self.__getattribute__('_huai2_jiu4'))
        self.pushButton_10.clicked.connect(self.__getattribute__('_chen2_guang1'))
    
    def _original_style(self):
        self._change()
    
    def _set_statu(self, group, value):
        '''
        批量设置状态
        '''
        [item.setEnabled(value) for item in group]

    def _cancel(self):
        '''
        还原到上一步
        '''
        self.temp_bgr[:] = self.im_ori[:]
        self._set_img()

    def _change(self):
        self._cancel()
        if self.faces == None:
            pass
        else:
            self._smooth()
            self._whitening()
            #self._Thin()
            self._brightening()
                
    def openfile(self):
        root_dir = os.getcwd()
        dir = QFileDialog()
        dir.setDirectory(root_dir)
        if dir.exec_():
            nw = dir.selectedFiles()[0]
            self.path_img = nw
            self.im_bgr, self.temp_bgr, self.faces = self.mu.read_and_mark(
                    self.path_img)
            self.im_ori, self.previous_bgr = self.im_bgr.copy(), self.im_bgr.copy()
            self._set_img()
            self._reset_value()
            if self.faces == None:
                self._set_statu(self.side_button, False)
                self.modify_button.setEnabled(True)
                self.style_button.setEnabled(True)
            else:
                self._set_statu(self.side_button, True)
        else:
            QMessageBox.warning(self.widget_2, '无效路径', '无效路径，请重新选择！')
    
    def _reset_value(self):
        self.horizontalSlider.setSliderPosition(0)
        self.horizontalSlider_2.setSliderPosition(50)
        self.horizontalSlider_5.setSliderPosition(50)
        self.horizontalSlider_10.setSliderPosition(50)

    def _cv2qimg(self, cvImg):
        '''
        将opencv的图片转换为QImage
        '''
        height, width, channel = cvImg.shape
        bytesPerLine = 3 * width
        image2show = QImage(cv2.cvtColor(cvImg, cv2.COLOR_BGR2RGB).data,
                            width, height, bytesPerLine, QImage.Format_RGB888)
        return image2show

    def _set_img(self):
        '''
        显示pixmap
        '''
        self.label_11.setPixmap(QPixmap.fromImage(self._cv2qimg(self.temp_bgr)))
    def _mapfaces(self, fun, value):
        '''
        对每张脸进行迭代操作
        '''
        self.previous_bgr[:] = self.temp_bgr[:]
        for face in self.faces[self.path_img]:
            fun(face, value)
        self._set_img()

    def _smooth(self):
        value = min(1, max(self.horizontalSlider.value()/100, 0))

        def fun(face, value):
            face.smooth(value, confirm=False)
            face.organs['nose'].smooth(value*2/3, confirm=False)
            face.organs['forehead'].smooth(value*3/2, confirm=False)
            face.organs['mouth'].smooth(value, confirm=False)
        self._mapfaces(fun, value)

    def _whitening(self):
        t = (self.horizontalSlider_2.value() - 50)/200
        value = min(1, t) * 2

        def fun(face, v):
            face.organs['left eye'].whitening(value, confirm=False)
            face.organs['right eye'].whitening(value, confirm=False)
            face.organs['left brow'].whitening(value, confirm=False)
            face.organs['right brow'].whitening(value, confirm=False)
            face.organs['nose'].whitening(value, confirm=False)
            face.organs['forehead'].whitening(value, confirm=False)
            face.organs['mouth'].whitening(value, confirm=False)
            face.whitening(value, confirm=False)
        self._mapfaces(fun, value)

    def _Thin(self):
        t = (self.horizontalSlider_5.value() - 50)/200
        value = min(1, t) * 2
        self.previous_bgr[:] = self.temp_bgr[:]
        self.temp_bgr = face_thin_auto(self.temp_bgr, detector, predictor)
        self.im_bgr = self.temp_bgr
        self._set_img()
        
    def _brightening(self):
        t = (self.horizontalSlider_10.value() - 50)/200
        value = min(1, t) * 2

        def fun(face, value):
            face.organs['mouth'].brightening(value, confirm=False)
        self._mapfaces(fun, value)

    def _qing1_se4(self):
        self._change()
        self.previous_bgr[:] = self.temp_bgr[:]

        cv2.applyColorMap(self.previous_bgr[:], 3, self.temp_bgr[:])
        self._set_img()

    def _lan2_diao4(self):
        self._change()
        self.previous_bgr[:] = self.temp_bgr[:]

        cv2.applyColorMap(self.previous_bgr[:], 5, self.temp_bgr[:])
        self._set_img()
    
    def _huai2_jiu4(self):
        self._change()
        self.previous_bgr[:] = self.temp_bgr[:]
        transform_matrix =np.asarray([[0.131, 0.534, 0.272],
                           [0.168, 0.686, 0.349],
                           [0.189, 0.769, 0.393]]).T
        self.temp_bgr[:] = np.dot(self.previous_bgr[:], transform_matrix).clip(0, 255)
        self._set_img()
    
    def _chen2_guang1(self):
        self._change()
        self.previous_bgr[:] = self.temp_bgr[:]
        self.temp_bgr[:] = cv2.convertScaleAbs(self.temp_bgr[:], beta=60)
        self._set_img()
    
    def show_face_area(self):
        self.face_area_widget.setVisible(True)
        self.modify_area_widget.setVisible(False)
        self.style_area_widget.setVisible(False)
    
    def show_modify_area(self):
        self.face_area_widget.setVisible(False)
        self.modify_area_widget.setVisible(True)
        self.style_area_widget.setVisible(False)
    
    def show_style_area(self):
        self.face_area_widget.setVisible(False)
        self.modify_area_widget.setVisible(False)
        self.style_area_widget.setVisible(True)

    def retranslateUi(self, UI):
        _translate = QtCore.QCoreApplication.translate
        UI.setWindowTitle(_translate("UI", "Form"))
        self.face_button.setText(_translate("UI", "美颜"))
        self.modify_button.setText(_translate("UI", "调整"))
        self.imitate_button.setText(_translate("UI", "仿妆"))
        self.emotion_button.setText(_translate("UI", "表情"))
        self.hair_button.setText(_translate("UI", "发型"))
        self.background_button.setText(_translate("UI", "背景"))
        self.style_button.setText(_translate("UI", "风格"))
        self.inputfile.setText(_translate("UI", "导入你的脑袋"))
        self.label_22.setText(_translate("UI", "亮度"))
        self.label_23.setText(_translate("UI", "对比度"))
        self.label_24.setText(_translate("UI", "饱和度"))
        self.label_25.setText(_translate("UI", "锐度 / 清晰度"))
        self.label_26.setText(_translate("UI", "色温"))
        self.label_27.setText(_translate("UI", "色调"))
        self.label_28.setText(_translate("UI", "降噪"))
        self.label_29.setText(_translate("UI", "曝光度"))
        self.label_30.setText(_translate("UI", "高光"))
        self.label_31.setText(_translate("UI", "胶片颗粒"))
        self.label.setText(_translate("UI", "磨皮"))
        self.label_2.setText(_translate("UI", "美白"))
        self.label_3.setText(_translate("UI", "红润"))
        self.label_4.setText(_translate("UI", "大眼"))
        self.label_5.setText(_translate("UI", "瘦脸"))
        self.label_6.setText(_translate("UI", "V脸"))
        self.label_7.setText(_translate("UI", "短脸"))
        self.label_8.setText(_translate("UI", "瘦鼻"))
        self.label_9.setText(_translate("UI", "红唇"))
        self.label_10.setText(_translate("UI", "祛皱"))
        self.label_14.setText(_translate("UI", "眼距"))
        self.label_15.setText(_translate("UI", "嘴唇厚度"))
        self.pushButton_9.setText(_translate("UI", "原图"))
        self.pushButton_8.setText(_translate("UI", "青涩"))
        self.pushButton_11.setText(_translate("UI", "牛仔"))
        self.pushButton_12.setText(_translate("UI", "蓝调"))
        self.pushButton_13.setText(_translate("UI", "硬像"))
        self.pushButton_15.setText(_translate("UI", "中灰"))
        self.pushButton_14.setText(_translate("UI", "光晕"))
        self.pushButton_16.setText(_translate("UI", "怀旧"))
        self.pushButton_10.setText(_translate("UI", "晨光"))

class Organ():
    def __init__(self, im_bgr, im_hsv, temp_bgr, temp_hsv, landmark, name, ksize=None):
        '''
        五官部位类
        '''
        self.im_bgr, self.im_hsv, self.landmark, self.name = im_bgr, im_hsv, landmark, name
        self.get_rect()
        self.shape = (int(self.bottom-self.top), int(self.right-self.left))
        self.size = self.shape[0]*self.shape[1]*3
        self.move = int(np.sqrt(self.size/3)/20)
        self.ksize = self.get_ksize()
        self.patch_bgr, self.patch_hsv = self.get_patch(
            self.im_bgr), self.get_patch(self.im_hsv)
        self.set_temp(temp_bgr, temp_hsv)
        self.patch_mask = self.get_mask_re()
        pass

    def set_temp(self, temp_bgr, temp_hsv):
        self.im_bgr_temp, self.im_hsv_temp = temp_bgr, temp_hsv
        self.patch_bgr_temp, self.patch_hsv_temp = self.get_patch(
            self.im_bgr_temp), self.get_patch(self.im_hsv_temp)

    def confirm(self):
        '''
        确认操作
        '''
        self.im_bgr[:], self.im_hsv[:] = self.im_bgr_temp[:], self.im_hsv_temp[:]

    def update_temp(self):
        '''
        更新临时图片
        '''
        self.im_bgr_temp[:], self.im_hsv_temp[:] = self.im_bgr[:], self.im_hsv[:]

    def get_ksize(self, rate=15):
        size = max([int(np.sqrt(self.size/3)/rate), 1])
        size = (size if size % 2 == 1 else size+1)
        return (size, size)

    def get_rect(self):
        '''
        获得定位方框
        '''
        ys, xs = self.landmark[:, 1], self.landmark[:, 0]
        self.top, self.bottom, self.left, self.right = np.min(
            ys), np.max(ys), np.min(xs), np.max(xs)

    def get_patch(self, im):
        '''
        截取局部切片
        '''
        shape = im.shape
        x = im[np.max([self.top-self.move, 0]):np.min([self.bottom+self.move, shape[0]]),
               np.max([self.left-self.move, 0]):np.min([self.right+self.move, shape[1]])]
        return x

    def _draw_convex_hull(self, im, points, color):
        '''
        勾画多凸边形
        '''
        points = cv2.convexHull(points)
        cv2.fillConvexPoly(im, points, color=color)

    def get_mask_re(self, ksize=None):
        '''
        获得局部相对坐标遮罩
        '''
        if ksize == None:
            ksize = self.ksize
        landmark_re = self.landmark.copy()
        landmark_re[:, 1] -= np.max([self.top-self.move, 0])
        landmark_re[:, 0] -= np.max([self.left-self.move, 0])
        mask = np.zeros(self.patch_bgr.shape[:2], dtype=np.float64)

        self._draw_convex_hull(mask,
                               landmark_re,
                               color=1)

        mask = np.array([mask, mask, mask]).transpose((1, 2, 0))
        mask = (cv2.GaussianBlur(mask, ksize, 0) > 0) * 1.0
        return cv2.GaussianBlur(mask, ksize, 0)[:]

    def get_mask_abs(self, ksize=None):
        '''
        获得全局绝对坐标遮罩
        '''
        if ksize == None:
            ksize = self.ksize
        mask = np.zeros(self.im_bgr.shape, dtype=np.float64)
        patch = self.get_patch(mask)
        patch[:] = self.patch_mask[:]
        return mask

    def whitening(self, rate=0.15, confirm=True):
        '''
        提亮美白
        '''
        if confirm:
            self.confirm()
            self.patch_hsv[:, :, -1] = np.minimum(self.patch_hsv[:, :, -1]+self.patch_hsv[:, :, -1]
                                                  * self.patch_mask[:, :, -1]*rate, 255).astype('uint8')
            self.im_bgr[:] = cv2.cvtColor(self.im_hsv, cv2.COLOR_HSV2BGR)[:]
            self.update_temp()
        else:
            self.patch_hsv_temp[:] = cv2.cvtColor(
                self.patch_bgr_temp, cv2.COLOR_BGR2HSV)[:]
            self.patch_hsv_temp[:, :, -1] = np.minimum(self.patch_hsv_temp[:, :, -1] +
                                                       self.patch_hsv_temp[:, :, -1]*self.patch_mask[:, :, -1]*rate, 255).astype('uint8')
            self.patch_bgr_temp[:] = cv2.cvtColor(
                self.patch_hsv_temp, cv2.COLOR_HSV2BGR)[:]

    def brightening(self, rate=0.3, confirm=True):
        '''
        提升鲜艳度
        '''
        patch_mask = self.get_mask_re((1, 1))
        if confirm:
            self.confirm()
            patch_new = self.patch_hsv[:, :, 1]*patch_mask[:, :, 1]*rate
            patch_new = cv2.GaussianBlur(patch_new, (3, 3), 0)
            self.patch_hsv[:, :, 1] = np.minimum(
                self.patch_hsv[:, :, 1]+patch_new, 255).astype('uint8')
            self.im_bgr[:] = cv2.cvtColor(self.im_hsv, cv2.COLOR_HSV2BGR)[:]
            self.update_temp()
        else:
            self.patch_hsv_temp[:] = cv2.cvtColor(
                self.patch_bgr_temp, cv2.COLOR_BGR2HSV)[:]
            patch_new = self.patch_hsv_temp[:, :, 1]*patch_mask[:, :, 1]*rate
            patch_new = cv2.GaussianBlur(patch_new, (3, 3), 0)
            self.patch_hsv_temp[:, :, 1] = np.minimum(
                self.patch_hsv[:, :, 1]+patch_new, 255).astype('uint8')
            self.patch_bgr_temp[:] = cv2.cvtColor(
                self.patch_hsv_temp, cv2.COLOR_HSV2BGR)[:]

    def smooth(self, rate=0.6, ksize=(7, 7), confirm=True):
        '''
        磨皮
        '''
        if ksize == None:
            ksize = self.get_ksize(80)
        index = self.patch_mask > 0
        if confirm:
            self.confirm()
            patch_new = cv2.GaussianBlur(cv2.bilateralFilter(
                self.patch_bgr, 3, *ksize), ksize, 0)
            self.patch_bgr[index] = np.minimum(
                rate*patch_new[index]+(1-rate)*self.patch_bgr[index], 255).astype('uint8')
            self.im_hsv[:] = cv2.cvtColor(self.im_bgr, cv2.COLOR_BGR2HSV)[:]
            self.update_temp()
        else:
            patch_new = cv2.GaussianBlur(cv2.bilateralFilter(
                self.patch_bgr_temp, 3, *ksize), ksize, 0)
            self.patch_bgr_temp[index] = np.minimum(
                rate*patch_new[index]+(1-rate)*self.patch_bgr_temp[index], 255).astype('uint8')
            self.patch_hsv_temp[:] = cv2.cvtColor(
                self.patch_bgr_temp, cv2.COLOR_BGR2HSV)[:]

    def sharpen(self, rate=0.3, confirm=True):
        '''
        锐化
        '''
        patch_mask = self.get_mask_re((3, 3))
        kernel = np.zeros((9, 9), np.float32)
        kernel[4, 4] = 2.0  # Identity, times two!
        # Create a box filter:
        boxFilter = np.ones((9, 9), np.float32) / 81.0

        # Subtract the two:
        kernel = kernel - boxFilter
        index = patch_mask > 0
        if confirm:
            self.confirm()
            sharp = cv2.filter2D(self.patch_bgr, -1, kernel)
            self.patch_bgr[index] = np.minimum(
                ((1-rate)*self.patch_bgr)[index]+sharp[index]*rate, 255).astype('uint8')
            self.update_temp()
        else:
            sharp = cv2.filter2D(self.patch_bgr_temp, -1, kernel)
            self.patch_bgr_temp[:] = np.minimum(
                self.patch_bgr_temp+self.patch_mask*sharp*rate, 255).astype('uint8')
            self.patch_hsv_temp[:] = cv2.cvtColor(
                self.patch_bgr_temp, cv2.COLOR_BGR2HSV)[:]

class Forehead(Organ):
    def __init__(self, im_bgr, im_hsv, temp_bgr, temp_hsv, landmark, mask_organs, name, ksize=None):
        self.mask_organs = mask_organs
        super(Forehead, self).__init__(im_bgr, im_hsv,
                                       temp_bgr, temp_hsv, landmark, name, ksize)

    def get_mask_re(self, ksize=None):
        '''
        获得局部相对坐标遮罩
        '''
        if ksize == None:
            ksize = self.ksize
        landmark_re = self.landmark.copy()
        landmark_re[:, 1] -= np.max([self.top-self.move, 0])
        landmark_re[:, 0] -= np.max([self.left-self.move, 0])
        mask = np.zeros(self.patch_bgr.shape[:2], dtype=np.float64)

        self._draw_convex_hull(mask,
                               landmark_re,
                               color=1)

        mask = np.array([mask, mask, mask]).transpose((1, 2, 0))

        mask = (cv2.GaussianBlur(mask, ksize, 0) > 0) * 1.0
        patch_organs = self.get_patch(self.mask_organs)
        mask = cv2.GaussianBlur(mask, ksize, 0)[:]
        mask[patch_organs > 0] = (1-patch_organs[patch_organs > 0])
        return mask

class Face(Organ):
    '''
    脸类
    '''

    def __init__(self, im_bgr, img_hsv, temp_bgr, temp_hsv, landmarks, index):
        self.index = index
        # 五官名称
        self.organs_name = ['jaw', 'mouth', 'nose',
                            'left eye', 'right eye', 'left brow', 'right brow']

        # 五官等标记点
        self.organs_points = [list(range(0, 17)), list(range(48, 61)), list(range(27, 35)), list(
            range(42, 48)), list(range(36, 42)), list(range(22, 27)), list(range(17, 22))]

        # 实例化脸对象和五官对象
        self.organs = {name: Organ(im_bgr, img_hsv, temp_bgr, temp_hsv, landmarks[points], name) for name, points in zip(
            self.organs_name, self.organs_points)}

        # 获得额头坐标，实例化额头
        mask_nose = self.organs['nose'].get_mask_abs()
        mask_organs = (self.organs['mouth'].get_mask_abs()+mask_nose+self.organs['left eye'].get_mask_abs(
        )+self.organs['right eye'].get_mask_abs()+self.organs['left brow'].get_mask_abs()+self.organs['right brow'].get_mask_abs())
        forehead_landmark = self.get_forehead_landmark(
            im_bgr, landmarks, mask_organs, mask_nose)
        self.organs['forehead'] = Forehead(
            im_bgr, img_hsv, temp_bgr, temp_hsv, forehead_landmark, mask_organs, 'forehead')
        mask_organs += self.organs['forehead'].get_mask_abs()

        # 人脸的完整标记点
        self.FACE_POINTS = np.concatenate([landmarks, forehead_landmark])
        super(Face, self).__init__(im_bgr, img_hsv,
                                   temp_bgr, temp_hsv, self.FACE_POINTS, 'face')

        mask_face = self.get_mask_abs()-mask_organs
        self.patch_mask = self.get_patch(mask_face)
        pass

    def get_forehead_landmark(self, im_bgr, face_landmark, mask_organs, mask_nose):
        '''
        计算额头坐标
        '''
        # 画椭圆
        radius = (np.linalg.norm(
            face_landmark[0]-face_landmark[16])/2).astype('int32')
        center_abs = tuple(
            ((face_landmark[0]+face_landmark[16])/2).astype('int32'))

        angle = np.degrees(np.arctan(
            (lambda l: l[1]/l[0])(face_landmark[16]-face_landmark[0]))).astype('int32')
        mask = np.zeros(mask_organs.shape[:2], dtype=np.float64)
        cv2.ellipse(mask, center_abs, (radius, radius), angle, 180, 360, 1, -1)
        # 剔除与五官重合部分
        mask[mask_organs[:, :, 0] > 0] = 0
        # 根据鼻子的肤色判断真正的额头面积
        index_bool = []
        for ch in range(3):
            mean, std = np.mean(im_bgr[:, :, ch][mask_nose[:, :, ch] > 0]), np.std(
                im_bgr[:, :, ch][mask_nose[:, :, ch] > 0])
            up, down = mean+0.5*std, mean-0.5*std
            index_bool.append((im_bgr[:, :, ch] < down)
                              | (im_bgr[:, :, ch] > up))
        index_zero = (
            (mask > 0) & index_bool[0] & index_bool[1] & index_bool[2])
        mask[index_zero] = 0
        index_abs = np.array(np.where(mask > 0)[::-1]).transpose()
        landmark = cv2.convexHull(index_abs).squeeze()
        return landmark

class Makeup():
    '''
    化妆器
    '''

    def __init__(self, predictor_path="./data/shape_predictor_68_face_landmarks.dat"):
        self.photo_path = []
        self.PREDICTOR_PATH = predictor_path
        self.faces = {}

        # 人脸定位、特征提取器，来自dlib
        self.detector = detector
        self.predictor = predictor

    def get_faces(self, im_bgr, im_hsv, temp_bgr, temp_hsv, name, n=1):
        '''
        人脸定位和特征提取，定位到两张及以上脸或者没有人脸将抛出异常
        im:
            照片的numpy数组
        fname:
            照片名字的字符串
        返回值:
            人脸特征(x,y)坐标的矩阵
        '''
        rects = self.detector(im_bgr, 1)

        if len(rects) < 1:
            raise ('Too many faces in '+name)
        return {name: [Face(im_bgr, im_hsv, temp_bgr, temp_hsv, np.array([[p.x, p.y] for p in self.predictor(im_bgr, rect).parts()]), i) for i, rect in enumerate(rects)]}

    def read_im(self, fname, scale=1):
        '''
        读取图片
        '''
        im = cv2.imdecode(np.fromfile(fname, dtype=np.uint8), -1)
        im = imutils.resize(im, width=600)
        if type(im) == type(None):
            raise ValueError(
                'Opencv error reading image "{}" , got None'.format(fname))
        return im

    def read_and_mark(self, fname):
        im_bgr = self.read_im(fname)
        im_hsv = cv2.cvtColor(im_bgr, cv2.COLOR_BGR2HSV)
        temp_bgr, temp_hsv = im_bgr.copy(), im_hsv.copy()
        try:
            faces = self.get_faces(im_bgr, im_hsv, temp_bgr, temp_hsv, fname)
        except:
            faces = None
        return im_bgr, temp_bgr, faces
